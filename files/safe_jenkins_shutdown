#!/usr/bin/env python
# Copyright 2015 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
import time

import jenkins

def get_builds(server):
    builds = []
    nodes = server.get_nodes()
    for node in nodes:
        # the name returned is not the name to lookup when
        # dealing with master :/
        if node['name'] == 'master':
            name = '(master)'
        else:
            name = node['name']
        info = server.get_node_info(name, depth=2)
        for executor in info['executors']:
            # executors are not idle when running a job.
            if not executor['idle']:
                builds.append(executor['currentExecutable'])
    return builds

def delete_offline_nodes(server):
    nodes = server.get_nodes()
    for node in nodes:
        if node['offline']:
            server.delete_node(node['name'])

def parse_args():
    parser = argparse.ArgumentParser(description='Safely stop Jenkins.')
    parser.add_argument('--url', default='http://localhost:8080',
                        help='Base url for Jenkins master.')
    parser.add_argument('--user', help='Username to connect to Jenkins with.')
    parser.add_argument('--password', help='Password to auth with.')
    parser.add_argument('--no-delete', dest='delete', action='store_false',
                        default=True, help='Password to auth with.')
    args = parser.parse_args()
    return args

def main():
    args = parse_args()
    server = jenkins.Jenkins(args.url,
                             username=args.user,
                             password=args.password)

    # Put in shutdown mode
    server.prepare_for_shutdown()
    while get_builds(server):
        # Jobs are slow wait a minute between polls
        time.sleep(60)
    if args.delete:
        # Remove any offline nodes so they don't go online after restart.
        delete_offline_nodes(server)

if __name__ == '__main__':
    main()
